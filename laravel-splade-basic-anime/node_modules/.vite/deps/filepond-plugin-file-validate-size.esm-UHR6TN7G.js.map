{
  "version": 3,
  "sources": ["../../filepond-plugin-file-validate-size/dist/filepond-plugin-file-validate-size.esm.js"],
  "sourcesContent": ["/*!\r\n * FilePondPluginFileValidateSize 2.2.8\r\n * Licensed under MIT, https://opensource.org/licenses/MIT/\r\n * Please visit https://pqina.nl/filepond/ for details.\r\n */\r\n\r\n/* eslint-disable */\r\n\r\nconst plugin = ({ addFilter, utils }) => {\r\n    // get quick reference to Type utils\r\n    const { Type, replaceInString, toNaturalFileSize } = utils;\r\n\r\n    // filtering if an item is allowed in hopper\r\n    addFilter('ALLOW_HOPPER_ITEM', (file, { query }) => {\r\n        if (!query('GET_ALLOW_FILE_SIZE_VALIDATION')) {\r\n            return true;\r\n        }\r\n\r\n        const sizeMax = query('GET_MAX_FILE_SIZE');\r\n        if (sizeMax !== null && file.size > sizeMax) {\r\n            return false;\r\n        }\r\n\r\n        const sizeMin = query('GET_MIN_FILE_SIZE');\r\n        if (sizeMin !== null && file.size < sizeMin) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\n    // called for each file that is loaded\r\n    // right before it is set to the item state\r\n    // should return a promise\r\n    addFilter(\r\n        'LOAD_FILE',\r\n        (file, { query }) =>\r\n            new Promise((resolve, reject) => {\r\n                // if not allowed, all fine, exit\r\n                if (!query('GET_ALLOW_FILE_SIZE_VALIDATION')) {\r\n                    return resolve(file);\r\n                }\r\n\r\n                // check if file should be filtered\r\n                const fileFilter = query('GET_FILE_VALIDATE_SIZE_FILTER');\r\n                if (fileFilter && !fileFilter(file)) {\r\n                    return resolve(file);\r\n                }\r\n\r\n                // reject or resolve based on file size\r\n                const sizeMax = query('GET_MAX_FILE_SIZE');\r\n                if (sizeMax !== null && file.size > sizeMax) {\r\n                    reject({\r\n                        status: {\r\n                            main: query('GET_LABEL_MAX_FILE_SIZE_EXCEEDED'),\r\n                            sub: replaceInString(query('GET_LABEL_MAX_FILE_SIZE'), {\r\n                                filesize: toNaturalFileSize(\r\n                                    sizeMax,\r\n                                    '.',\r\n                                    query('GET_FILE_SIZE_BASE'),\r\n                                    query('GET_FILE_SIZE_LABELS', query)\r\n                                ),\r\n                            }),\r\n                        },\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                // reject or resolve based on file size\r\n                const sizeMin = query('GET_MIN_FILE_SIZE');\r\n                if (sizeMin !== null && file.size < sizeMin) {\r\n                    reject({\r\n                        status: {\r\n                            main: query('GET_LABEL_MIN_FILE_SIZE_EXCEEDED'),\r\n                            sub: replaceInString(query('GET_LABEL_MIN_FILE_SIZE'), {\r\n                                filesize: toNaturalFileSize(\r\n                                    sizeMin,\r\n                                    '.',\r\n                                    query('GET_FILE_SIZE_BASE'),\r\n                                    query('GET_FILE_SIZE_LABELS', query)\r\n                                ),\r\n                            }),\r\n                        },\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                // returns the current option value\r\n                const totalSizeMax = query('GET_MAX_TOTAL_FILE_SIZE');\r\n                if (totalSizeMax !== null) {\r\n                    // get the current total file size\r\n                    const currentTotalSize = query('GET_ACTIVE_ITEMS').reduce((total, item) => {\r\n                        return total + item.fileSize;\r\n                    }, 0);\r\n\r\n                    // get the size of the new file\r\n                    if (currentTotalSize > totalSizeMax) {\r\n                        reject({\r\n                            status: {\r\n                                main: query('GET_LABEL_MAX_TOTAL_FILE_SIZE_EXCEEDED'),\r\n                                sub: replaceInString(query('GET_LABEL_MAX_TOTAL_FILE_SIZE'), {\r\n                                    filesize: toNaturalFileSize(\r\n                                        totalSizeMax,\r\n                                        '.',\r\n                                        query('GET_FILE_SIZE_BASE'),\r\n                                        query('GET_FILE_SIZE_LABELS', query)\r\n                                    ),\r\n                                }),\r\n                            },\r\n                        });\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                // file is fine, let's pass it back\r\n                resolve(file);\r\n            })\r\n    );\r\n\r\n    return {\r\n        options: {\r\n            // Enable or disable file type validation\r\n            allowFileSizeValidation: [true, Type.BOOLEAN],\r\n\r\n            // Max individual file size in bytes\r\n            maxFileSize: [null, Type.INT],\r\n\r\n            // Min individual file size in bytes\r\n            minFileSize: [null, Type.INT],\r\n\r\n            // Max total file size in bytes\r\n            maxTotalFileSize: [null, Type.INT],\r\n\r\n            // Filter the files that need to be validated for size\r\n            fileValidateSizeFilter: [null, Type.FUNCTION],\r\n\r\n            // error labels\r\n            labelMinFileSizeExceeded: ['File is too small', Type.STRING],\r\n            labelMinFileSize: ['Minimum file size is {filesize}', Type.STRING],\r\n\r\n            labelMaxFileSizeExceeded: ['File is too large', Type.STRING],\r\n            labelMaxFileSize: ['Maximum file size is {filesize}', Type.STRING],\r\n\r\n            labelMaxTotalFileSizeExceeded: ['Maximum total size exceeded', Type.STRING],\r\n            labelMaxTotalFileSize: ['Maximum total file size is {filesize}', Type.STRING],\r\n        },\r\n    };\r\n};\r\n\r\n// fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\r\nconst isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\r\nif (isBrowser) {\r\n    document.dispatchEvent(new CustomEvent('FilePond:pluginloaded', { detail: plugin }));\r\n}\r\n\r\nexport default plugin;\r\n"],
  "mappings": "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",
  "names": []
}
