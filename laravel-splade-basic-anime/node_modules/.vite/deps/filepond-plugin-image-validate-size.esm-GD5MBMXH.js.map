{
  "version": 3,
  "sources": ["../../filepond-plugin-image-validate-size/dist/filepond-plugin-image-validate-size.esm.js"],
  "sourcesContent": ["/*!\r\n * FilePondPluginImageValidateSize 1.2.7\r\n * Licensed under MIT, https://opensource.org/licenses/MIT/\r\n * Please visit https://pqina.nl/filepond/ for details.\r\n */\r\n\r\n/* eslint-disable */\r\n\r\n// test if file is of type image\r\nconst isImage = file => /^image/.test(file.type);\r\n\r\nconst getImageSize = file =>\r\n  new Promise((resolve, reject) => {\r\n    const image = document.createElement('img');\r\n    image.src = URL.createObjectURL(file);\r\n    image.onerror = err => {\r\n      clearInterval(intervalId);\r\n      reject(err);\r\n    };\r\n    const intervalId = setInterval(() => {\r\n      if (image.naturalWidth && image.naturalHeight) {\r\n        clearInterval(intervalId);\r\n        URL.revokeObjectURL(image.src);\r\n        resolve({\r\n          width: image.naturalWidth,\r\n          height: image.naturalHeight\r\n        });\r\n      }\r\n    }, 1);\r\n  });\r\n\r\nconst plugin = ({ addFilter, utils }) => {\r\n  // get quick reference to Type utils\r\n  const { Type, replaceInString, isFile } = utils;\r\n\r\n  // required file size\r\n  const validateFile = (file, bounds, measure) =>\r\n    new Promise((resolve, reject) => {\r\n      const onReceiveSize = ({ width, height }) => {\r\n        const {\r\n          minWidth,\r\n          minHeight,\r\n          maxWidth,\r\n          maxHeight,\r\n          minResolution,\r\n          maxResolution\r\n        } = bounds;\r\n\r\n        const resolution = width * height;\r\n\r\n        // validation result\r\n        if (width < minWidth || height < minHeight) {\r\n          reject('TOO_SMALL');\r\n        } else if (width > maxWidth || height > maxHeight) {\r\n          reject('TOO_BIG');\r\n        } else if (minResolution !== null && resolution < minResolution) {\r\n          reject('TOO_LOW_RES');\r\n        } else if (maxResolution !== null && resolution > maxResolution) {\r\n          reject('TOO_HIGH_RES');\r\n        }\r\n\r\n        // all is well\r\n        resolve();\r\n      };\r\n\r\n      getImageSize(file)\r\n        .then(onReceiveSize)\r\n        .catch(() => {\r\n          // no custom measure method supplied, exit here\r\n          if (!measure) {\r\n            reject();\r\n            return;\r\n          }\r\n\r\n          // try fallback if defined by user, else reject\r\n          measure(file, bounds)\r\n            .then(onReceiveSize)\r\n            .catch(() => reject());\r\n        });\r\n    });\r\n\r\n  // called for each file that is loaded\r\n  // right before it is set to the item state\r\n  // should return a promise\r\n  addFilter(\r\n    'LOAD_FILE',\r\n    (file, { query }) =>\r\n      new Promise((resolve, reject) => {\r\n        if (\r\n          !isFile(file) ||\r\n          !isImage(file) ||\r\n          !query('GET_ALLOW_IMAGE_VALIDATE_SIZE')\r\n        ) {\r\n          resolve(file);\r\n          return;\r\n        }\r\n\r\n        // get required dimensions\r\n        const bounds = {\r\n          minWidth: query('GET_IMAGE_VALIDATE_SIZE_MIN_WIDTH'),\r\n          minHeight: query('GET_IMAGE_VALIDATE_SIZE_MIN_HEIGHT'),\r\n          maxWidth: query('GET_IMAGE_VALIDATE_SIZE_MAX_WIDTH'),\r\n          maxHeight: query('GET_IMAGE_VALIDATE_SIZE_MAX_HEIGHT'),\r\n          minResolution: query('GET_IMAGE_VALIDATE_SIZE_MIN_RESOLUTION'),\r\n          maxResolution: query('GET_IMAGE_VALIDATE_SIZE_MAX_RESOLUTION')\r\n        };\r\n\r\n        // get optional custom measure function\r\n        const measure = query('GET_IMAGE_VALIDATE_SIZE_MEASURE');\r\n\r\n        validateFile(file, bounds, measure)\r\n          .then(() => {\r\n            resolve(file);\r\n          })\r\n          .catch(error => {\r\n            const status = error\r\n              ? {\r\n                  TOO_SMALL: {\r\n                    label: query(\r\n                      'GET_IMAGE_VALIDATE_SIZE_LABEL_IMAGE_SIZE_TOO_SMALL'\r\n                    ),\r\n                    details: query(\r\n                      'GET_IMAGE_VALIDATE_SIZE_LABEL_EXPECTED_MIN_SIZE'\r\n                    )\r\n                  },\r\n                  TOO_BIG: {\r\n                    label: query(\r\n                      'GET_IMAGE_VALIDATE_SIZE_LABEL_IMAGE_SIZE_TOO_BIG'\r\n                    ),\r\n                    details: query(\r\n                      'GET_IMAGE_VALIDATE_SIZE_LABEL_EXPECTED_MAX_SIZE'\r\n                    )\r\n                  },\r\n                  TOO_LOW_RES: {\r\n                    label: query(\r\n                      'GET_IMAGE_VALIDATE_SIZE_LABEL_IMAGE_RESOLUTION_TOO_LOW'\r\n                    ),\r\n                    details: query(\r\n                      'GET_IMAGE_VALIDATE_SIZE_LABEL_EXPECTED_MIN_RESOLUTION'\r\n                    )\r\n                  },\r\n                  TOO_HIGH_RES: {\r\n                    label: query(\r\n                      'GET_IMAGE_VALIDATE_SIZE_LABEL_IMAGE_RESOLUTION_TOO_HIGH'\r\n                    ),\r\n                    details: query(\r\n                      'GET_IMAGE_VALIDATE_SIZE_LABEL_EXPECTED_MAX_RESOLUTION'\r\n                    )\r\n                  }\r\n                }[error]\r\n              : {\r\n                  label: query('GET_IMAGE_VALIDATE_SIZE_LABEL_FORMAT_ERROR'),\r\n                  details: file.type\r\n                };\r\n\r\n            reject({\r\n              status: {\r\n                main: status.label,\r\n                sub: error\r\n                  ? replaceInString(status.details, bounds)\r\n                  : status.details\r\n              }\r\n            });\r\n          });\r\n      })\r\n  );\r\n\r\n  // expose plugin\r\n  return {\r\n    // default options\r\n    options: {\r\n      // Enable or disable file type validation\r\n      allowImageValidateSize: [true, Type.BOOLEAN],\r\n\r\n      // Error thrown when image can not be loaded\r\n      imageValidateSizeLabelFormatError: [\r\n        'Image type not supported',\r\n        Type.STRING\r\n      ],\r\n\r\n      // Custom function to use as image measure\r\n      imageValidateSizeMeasure: [null, Type.FUNCTION],\r\n\r\n      // Required amount of pixels in the image\r\n      imageValidateSizeMinResolution: [null, Type.INT],\r\n      imageValidateSizeMaxResolution: [null, Type.INT],\r\n      imageValidateSizeLabelImageResolutionTooLow: [\r\n        'Resolution is too low',\r\n        Type.STRING\r\n      ],\r\n      imageValidateSizeLabelImageResolutionTooHigh: [\r\n        'Resolution is too high',\r\n        Type.STRING\r\n      ],\r\n      imageValidateSizeLabelExpectedMinResolution: [\r\n        'Minimum resolution is {minResolution}',\r\n        Type.STRING\r\n      ],\r\n      imageValidateSizeLabelExpectedMaxResolution: [\r\n        'Maximum resolution is {maxResolution}',\r\n        Type.STRING\r\n      ],\r\n\r\n      // Required dimensions\r\n      imageValidateSizeMinWidth: [1, Type.INT], // needs to be at least one pixel\r\n      imageValidateSizeMinHeight: [1, Type.INT],\r\n      imageValidateSizeMaxWidth: [65535, Type.INT], // maximum size of JPEG, fine for now I guess\r\n      imageValidateSizeMaxHeight: [65535, Type.INT],\r\n\r\n      // Label to show when an image is too small or image is too big\r\n      imageValidateSizeLabelImageSizeTooSmall: [\r\n        'Image is too small',\r\n        Type.STRING\r\n      ],\r\n      imageValidateSizeLabelImageSizeTooBig: ['Image is too big', Type.STRING],\r\n      imageValidateSizeLabelExpectedMinSize: [\r\n        'Minimum size is {minWidth} × {minHeight}',\r\n        Type.STRING\r\n      ],\r\n      imageValidateSizeLabelExpectedMaxSize: [\r\n        'Maximum size is {maxWidth} × {maxHeight}',\r\n        Type.STRING\r\n      ]\r\n    }\r\n  };\r\n};\r\n\r\n// fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\r\nconst isBrowser =\r\n  typeof window !== 'undefined' && typeof window.document !== 'undefined';\r\nif (isBrowser) {\r\n  document.dispatchEvent(\r\n    new CustomEvent('FilePond:pluginloaded', { detail: plugin })\r\n  );\r\n}\r\n\r\nexport default plugin;\r\n"],
  "mappings": ";;;AASA,IAAM,UAAU,UAAQ,SAAS,KAAK,KAAK,IAAI;AAE/C,IAAM,eAAe,UACnB,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC/B,QAAM,QAAQ,SAAS,cAAc,KAAK;AAC1C,QAAM,MAAM,IAAI,gBAAgB,IAAI;AACpC,QAAM,UAAU,SAAO;AACrB,kBAAc,UAAU;AACxB,WAAO,GAAG;AAAA,EACZ;AACA,QAAM,aAAa,YAAY,MAAM;AACnC,QAAI,MAAM,gBAAgB,MAAM,eAAe;AAC7C,oBAAc,UAAU;AACxB,UAAI,gBAAgB,MAAM,GAAG;AAC7B,cAAQ;AAAA,QACN,OAAO,MAAM;AAAA,QACb,QAAQ,MAAM;AAAA,MAChB,CAAC;AAAA,IACH;AAAA,EACF,GAAG,CAAC;AACN,CAAC;AAEH,IAAM,SAAS,CAAC,EAAE,WAAW,MAAM,MAAM;AAEvC,QAAM,EAAE,MAAM,iBAAiB,OAAO,IAAI;AAG1C,QAAM,eAAe,CAAC,MAAM,QAAQ,YAClC,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC/B,UAAM,gBAAgB,CAAC,EAAE,OAAO,OAAO,MAAM;AAC3C,YAAM;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF,IAAI;AAEJ,YAAM,aAAa,QAAQ;AAG3B,UAAI,QAAQ,YAAY,SAAS,WAAW;AAC1C,eAAO,WAAW;AAAA,MACpB,WAAW,QAAQ,YAAY,SAAS,WAAW;AACjD,eAAO,SAAS;AAAA,MAClB,WAAW,kBAAkB,QAAQ,aAAa,eAAe;AAC/D,eAAO,aAAa;AAAA,MACtB,WAAW,kBAAkB,QAAQ,aAAa,eAAe;AAC/D,eAAO,cAAc;AAAA,MACvB;AAGA,cAAQ;AAAA,IACV;AAEA,iBAAa,IAAI,EACd,KAAK,aAAa,EAClB,MAAM,MAAM;AAEX,UAAI,CAAC,SAAS;AACZ,eAAO;AACP;AAAA,MACF;AAGA,cAAQ,MAAM,MAAM,EACjB,KAAK,aAAa,EAClB,MAAM,MAAM,OAAO,CAAC;AAAA,IACzB,CAAC;AAAA,EACL,CAAC;AAKH;AAAA,IACE;AAAA,IACA,CAAC,MAAM,EAAE,MAAM,MACb,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC/B,UACE,CAAC,OAAO,IAAI,KACZ,CAAC,QAAQ,IAAI,KACb,CAAC,MAAM,+BAA+B,GACtC;AACA,gBAAQ,IAAI;AACZ;AAAA,MACF;AAGA,YAAM,SAAS;AAAA,QACb,UAAU,MAAM,mCAAmC;AAAA,QACnD,WAAW,MAAM,oCAAoC;AAAA,QACrD,UAAU,MAAM,mCAAmC;AAAA,QACnD,WAAW,MAAM,oCAAoC;AAAA,QACrD,eAAe,MAAM,wCAAwC;AAAA,QAC7D,eAAe,MAAM,wCAAwC;AAAA,MAC/D;AAGA,YAAM,UAAU,MAAM,iCAAiC;AAEvD,mBAAa,MAAM,QAAQ,OAAO,EAC/B,KAAK,MAAM;AACV,gBAAQ,IAAI;AAAA,MACd,CAAC,EACA,MAAM,WAAS;AACd,cAAM,SAAS,QACX;AAAA,UACE,WAAW;AAAA,YACT,OAAO;AAAA,cACL;AAAA,YACF;AAAA,YACA,SAAS;AAAA,cACP;AAAA,YACF;AAAA,UACF;AAAA,UACA,SAAS;AAAA,YACP,OAAO;AAAA,cACL;AAAA,YACF;AAAA,YACA,SAAS;AAAA,cACP;AAAA,YACF;AAAA,UACF;AAAA,UACA,aAAa;AAAA,YACX,OAAO;AAAA,cACL;AAAA,YACF;AAAA,YACA,SAAS;AAAA,cACP;AAAA,YACF;AAAA,UACF;AAAA,UACA,cAAc;AAAA,YACZ,OAAO;AAAA,cACL;AAAA,YACF;AAAA,YACA,SAAS;AAAA,cACP;AAAA,YACF;AAAA,UACF;AAAA,QACF,EAAE,KAAK,IACP;AAAA,UACE,OAAO,MAAM,4CAA4C;AAAA,UACzD,SAAS,KAAK;AAAA,QAChB;AAEJ,eAAO;AAAA,UACL,QAAQ;AAAA,YACN,MAAM,OAAO;AAAA,YACb,KAAK,QACD,gBAAgB,OAAO,SAAS,MAAM,IACtC,OAAO;AAAA,UACb;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAGA,SAAO;AAAA;AAAA,IAEL,SAAS;AAAA;AAAA,MAEP,wBAAwB,CAAC,MAAM,KAAK,OAAO;AAAA;AAAA,MAG3C,mCAAmC;AAAA,QACjC;AAAA,QACA,KAAK;AAAA,MACP;AAAA;AAAA,MAGA,0BAA0B,CAAC,MAAM,KAAK,QAAQ;AAAA;AAAA,MAG9C,gCAAgC,CAAC,MAAM,KAAK,GAAG;AAAA,MAC/C,gCAAgC,CAAC,MAAM,KAAK,GAAG;AAAA,MAC/C,6CAA6C;AAAA,QAC3C;AAAA,QACA,KAAK;AAAA,MACP;AAAA,MACA,8CAA8C;AAAA,QAC5C;AAAA,QACA,KAAK;AAAA,MACP;AAAA,MACA,6CAA6C;AAAA,QAC3C;AAAA,QACA,KAAK;AAAA,MACP;AAAA,MACA,6CAA6C;AAAA,QAC3C;AAAA,QACA,KAAK;AAAA,MACP;AAAA;AAAA,MAGA,2BAA2B,CAAC,GAAG,KAAK,GAAG;AAAA;AAAA,MACvC,4BAA4B,CAAC,GAAG,KAAK,GAAG;AAAA,MACxC,2BAA2B,CAAC,OAAO,KAAK,GAAG;AAAA;AAAA,MAC3C,4BAA4B,CAAC,OAAO,KAAK,GAAG;AAAA;AAAA,MAG5C,yCAAyC;AAAA,QACvC;AAAA,QACA,KAAK;AAAA,MACP;AAAA,MACA,uCAAuC,CAAC,oBAAoB,KAAK,MAAM;AAAA,MACvE,uCAAuC;AAAA,QACrC;AAAA,QACA,KAAK;AAAA,MACP;AAAA,MACA,uCAAuC;AAAA,QACrC;AAAA,QACA,KAAK;AAAA,MACP;AAAA,IACF;AAAA,EACF;AACF;AAGA,IAAM,YACJ,OAAO,WAAW,eAAe,OAAO,OAAO,aAAa;AAC9D,IAAI,WAAW;AACb,WAAS;AAAA,IACP,IAAI,YAAY,yBAAyB,EAAE,QAAQ,OAAO,CAAC;AAAA,EAC7D;AACF;AAEA,IAAO,kDAAQ;",
  "names": []
}
